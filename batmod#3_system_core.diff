diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index b323438500..f62ef97dba 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -37,6 +37,7 @@
 #include <utils/Errors.h>
 #include <utils/String8.h>
 #include <utils/Vector.h>
+#include <sys/system_properties.h>
 
 #define POWER_SUPPLY_SUBSYSTEM "power_supply"
 #define POWER_SUPPLY_SYSFS_PATH "/sys/class/" POWER_SUPPLY_SUBSYSTEM
@@ -46,6 +47,24 @@
 #define MILLION 1.0e6
 #define DEFAULT_VBUS_VOLTAGE 5000000
 
+#define POWER_SUPPLY_MOD "gb_battery"
+
+#define POWER_SUPPLY_MOD_BATTERY_MODE_PROP "sys.mod.batterymode"
+
+#define POWER_SUPPLY_MOD_TYPE_PATH "/sys/class/power_supply/gb_ptp/internal_send"
+#define POWER_SUPPLY_MOD_RECHRG_START_SOC "/sys/module/qpnp_smbcharger_mmi/parameters/eb_rechrg_start_soc"
+#define POWER_SUPPLY_MOD_RECHRG_STOP_SOC "/sys/module/qpnp_smbcharger_mmi/parameters/eb_rechrg_stop_soc"
+
+#define POWER_SUPPLY_MOD_TYPE_UNKNOWN      0
+#define POWER_SUPPLY_MOD_TYPE_REMOTE       1
+#define POWER_SUPPLY_MOD_TYPE_SUPPLEMENTAL 2
+#define POWER_SUPPLY_MOD_TYPE_EMERGENCY    3
+
+// the following defines should be consistent with those defined in:
+// motorola/frameworks/base/motomods/service/core/src/com/motorola/modservice/ui/Constants.java
+#define POWER_SUPPLY_MOD_BATTERY_MODE_TOPOFF       0
+#define POWER_SUPPLY_MOD_BATTERY_MODE_EFFICIENCY   1
+
 namespace android {
 
 struct sysfsStringEnumMap {
@@ -326,6 +345,72 @@ bool BatteryMonitor::update(void) {
         }
     }
 
+    props.modLevel = -1;
+    props.modStatus = BATTERY_STATUS_UNKNOWN;
+    props.modType = POWER_SUPPLY_MOD_TYPE_UNKNOWN;
+    props.modFlag = 0;
+
+    // get mod battery status
+    if (access(mHealthdConfig->modStatusPath.string(), R_OK) == 0) {
+        if (readFromFile(mHealthdConfig->modStatusPath, &buf) > 0) {
+            props.modStatus = getBatteryStatus(buf.c_str());
+        }
+    }
+
+    // don't bother to read other mod values when it not attached
+    if (props.modStatus != BATTERY_STATUS_UNKNOWN) {
+        // get mod battery level
+        if (access(mHealthdConfig->modCapacityPath.string(), R_OK) == 0) {
+            props.modLevel = getIntField(mHealthdConfig->modCapacityPath);
+        }
+        // get mod type
+        if (access(mHealthdConfig->modTypePath.string(), R_OK) == 0) {
+            props.modType = getIntField(mHealthdConfig->modTypePath);
+        }
+
+        // attempt to hack battery level for non-empty supplemental mod
+        if ((props.modType == POWER_SUPPLY_MOD_TYPE_SUPPLEMENTAL) &&
+            (props.modLevel > 0)) {
+
+            // get battery mode from system properties
+            char value[PROP_VALUE_MAX];
+            property_get(POWER_SUPPLY_MOD_BATTERY_MODE_PROP, value, "0");
+            int batteryMode = atoi(value);
+
+            if (batteryMode == POWER_SUPPLY_MOD_BATTERY_MODE_TOPOFF) {
+                if (props.batteryLevel == 99) {
+                    props.batteryLevel = 100;
+                    props.modFlag = 1;
+                }
+            } else if (batteryMode == POWER_SUPPLY_MOD_BATTERY_MODE_EFFICIENCY) {
+                int startLevel = -1, stopLevel = -1;
+                if (access(mHealthdConfig->modRechargeStartLevelPath.string(), R_OK) == 0) {
+                    startLevel = getIntField(mHealthdConfig->modRechargeStartLevelPath);
+                }
+                if (access(mHealthdConfig->modRechargeStopLevelPath.string(), R_OK) == 0) {
+                    stopLevel = getIntField(mHealthdConfig->modRechargeStopLevelPath);
+                }
+                if ((startLevel >= 0) && (stopLevel > 0) && (startLevel < stopLevel)) {
+                    if (props.batteryLevel == startLevel) {
+                        props.batteryLevel = stopLevel;
+                        props.modFlag = stopLevel - startLevel;
+                    }
+                }
+            }
+        }
+    }
+
+    // mod attach/detach can cause mod sys file ready/destory in different time. Make sure
+    // mod value reported consistent
+    if (props.modLevel < 0 ||
+            props.modStatus == BATTERY_STATUS_UNKNOWN ||
+            props.modType == POWER_SUPPLY_MOD_TYPE_UNKNOWN) {
+        props.modLevel = -1;
+        props.modStatus == BATTERY_STATUS_UNKNOWN;
+        props.modType = POWER_SUPPLY_MOD_TYPE_UNKNOWN;
+        props.modFlag = 0;
+    }
+
     logthis = !healthd_board_battery_update(&props);
 
     if (logthis) {
@@ -355,6 +440,20 @@ bool BatteryMonitor::update(void) {
                 len += snprintf(dmesgline + len, sizeof(dmesgline) - len,
                                 " cc=%d", props.batteryCycleCount);
             }
+
+            char b[20];
+            snprintf(b, sizeof(b), " ml=%d", props.modLevel);
+            strlcat(dmesgline, b, sizeof(dmesgline));
+
+            snprintf(b, sizeof(b), " mst=%d", props.modStatus);
+            strlcat(dmesgline, b, sizeof(dmesgline));
+
+            snprintf(b, sizeof(b), " mf=%d", props.modFlag);
+            strlcat(dmesgline, b, sizeof(dmesgline));
+
+            snprintf(b, sizeof(b), " mt=%d", props.modType);
+            strlcat(dmesgline, b, sizeof(dmesgline));
+
         } else {
             len = snprintf(dmesgline, sizeof(dmesgline),
                  "battery none");
@@ -437,6 +536,25 @@ status_t BatteryMonitor::getProperty(int id, struct BatteryProperty *val) {
             ret = NAME_NOT_FOUND;
         }
         break;
+    case BATTERY_PROP_CHARGE_FULL:
+        if (!mHealthdConfig->batteryFullChargePath.isEmpty() &&
+            (access(mHealthdConfig->batteryFullChargePath.string(), R_OK) == 0)) {
+            val->valueInt64 = getIntField(mHealthdConfig->batteryFullChargePath);
+            ret = NO_ERROR;
+        } else {
+            ret = NAME_NOT_FOUND;
+        }
+        break;
+
+    case BATTERY_PROP_MOD_CHARGE_FULL:
+        if (!mHealthdConfig->modChargeFullPath.isEmpty() &&
+            (access(mHealthdConfig->modChargeFullPath.string(), R_OK) == 0)) {
+            val->valueInt64 = getIntField(mHealthdConfig->modChargeFullPath);
+            ret = NO_ERROR;
+        } else {
+            ret = NAME_NOT_FOUND;
+        }
+        break;
 
     case BATTERY_PROP_BATTERY_STATUS:
         if (mAlwaysPluggedDevice) {
@@ -522,6 +640,9 @@ void BatteryMonitor::init(struct healthd_config *hc) {
             if (!strcmp(name, ".") || !strcmp(name, ".."))
                 continue;
 
+            // ignore gb_battery as we will hardcode path for mod
+            if (!strcmp(name, POWER_SUPPLY_MOD)) continue;
+
             // Look for "type" file in each subdirectory
             path.clear();
             path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH, name);
@@ -656,6 +777,30 @@ void BatteryMonitor::init(struct healthd_config *hc) {
         }
     }
 
+    // mod battery level path
+    path.clear();
+    path.appendFormat("%s/%s/capacity", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
+    mHealthdConfig->modCapacityPath = path;
+
+    // mod battery status path
+    path.clear();
+    path.appendFormat("%s/%s/status", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
+    mHealthdConfig->modStatusPath = path;
+
+    // mod battery full capacity path
+    path.clear();
+    path.appendFormat("%s/%s/charge_full_design", POWER_SUPPLY_SYSFS_PATH, POWER_SUPPLY_MOD);
+    mHealthdConfig->modChargeFullPath = path;
+
+    // mod type path
+    mHealthdConfig->modTypePath = POWER_SUPPLY_MOD_TYPE_PATH;
+
+    // efficiency mode recharge start path
+    mHealthdConfig->modRechargeStartLevelPath = POWER_SUPPLY_MOD_RECHRG_START_SOC;
+
+    // efficiency mode recharge stop path
+    mHealthdConfig->modRechargeStopLevelPath = POWER_SUPPLY_MOD_RECHRG_STOP_SOC;
+
     // Typically the case for devices which do not have a battery and
     // and are always plugged into AC mains.
     if (!mBatteryDevicePresent) {
diff --git a/healthd/healthd_common.cpp b/healthd/healthd_common.cpp
index 6599919181..bd458d6c11 100644
--- a/healthd/healthd_common.cpp
+++ b/healthd/healthd_common.cpp
@@ -64,6 +64,12 @@ static struct healthd_config healthd_config = {
     .batteryChargeCounterPath = String8(String8::kEmptyString),
     .batteryFullChargePath = String8(String8::kEmptyString),
     .batteryCycleCountPath = String8(String8::kEmptyString),
+    .modChargeFullPath = String8(String8::kEmptyString),
+    .modCapacityPath = String8(String8::kEmptyString),
+    .modStatusPath = String8(String8::kEmptyString),
+    .modTypePath = String8(String8::kEmptyString),
+    .modRechargeStartLevelPath = String8(String8::kEmptyString),
+    .modRechargeStopLevelPath = String8(String8::kEmptyString),
     .energyCounter = NULL,
     .boot_min_cap = 0,
     .screen_on = NULL,
diff --git a/healthd/include/healthd/healthd.h b/healthd/include/healthd/healthd.h
index 17efbd62ab..670dc209c1 100644
--- a/healthd/include/healthd/healthd.h
+++ b/healthd/include/healthd/healthd.h
@@ -68,6 +68,13 @@ struct healthd_config {
     android::String8 batteryFullChargePath;
     android::String8 batteryCycleCountPath;
 
+    android::String8 modChargeFullPath;
+    android::String8 modCapacityPath;
+    android::String8 modStatusPath;
+    android::String8 modTypePath;
+    android::String8 modRechargeStartLevelPath;
+    android::String8 modRechargeStopLevelPath;
+
     int (*energyCounter)(int64_t *);
     int boot_min_cap;
     bool (*screen_on)(android::BatteryProperties *props);
